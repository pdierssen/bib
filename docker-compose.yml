services:
  bib_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bib_backend
    volumes:
      - ./backend:/app
    ports:
      - "${BACKEND_PORT}:8000"
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}

    depends_on:
      database:
        condition: service_healthy

    command: >
      sh -c "
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
#                   python manage.py makemigrations && was used for custom user

    networks:
      - network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bib_frontend
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - bib_backend
    networks:
      - network


  database:
    image: postgres:latest
    container_name: bib_database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - network


volumes:
  db_data:
    driver: local

networks:
  network:
    driver: bridge